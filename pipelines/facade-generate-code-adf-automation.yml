trigger: none

name: adf-end-to-end-deployment

variables:
  environment: 'develop'

resources:
  repositories:
    - repository: pnp-pipelines-automation
      type: git
      name: pnp-pipelines-automation
      ref: refs/heads/ard-ADF

    - repository: pnp-deploy-repo-automation
      type: git
      name: pnp-deploy-repo-automation
      ref: ${{ format('refs/heads/{0}', parameters.deploy_repo_branch) }}

    - repository: facade-template-tf-module-adf_pnp
      type: git
      name: facade-template-tf-module-adf_pnp
      ref: refs/heads/automation

pool:
  name: vmss-dm-pp-prd-we-1
    
parameters:
  - name: repository_name
    type: string
    default: '9p9p9p-automation-poc-adf-dm-pp-dev'

  - name: project_name
    type: string
    default: 'Data Management'
    
  - name: project_abbv
    type: string
    default: 'poc-x1'
    
  - name: deploy_repo_branch
    type: string
    default: 'main'
    displayName: 'Deploy repo branch (use repository name for new repos)'    

  - name: dev_init_flag
    type: string
    default: 'true'

  - name: prd_flag
    type: string
    default: 'false'    

  - name: branch_name
    type: string
    values:
    - main
    - adf_publish    

  - name: build_pipeline
    type: string
    default: 'true'

  - name: deploy_pipeline
    type: string
    default: 'true'

  - name: deploy_pipeline_name
    type: string
    default: '9p9p9p-automation-poc-adf-dm-pp-dev"'    

  - name: enable_deployment_trigger
    type: boolean
    default: 'true'    

  - name: location
    type: string
    default: 'westeurope'

  - name: key_vault_prefix
    type: string
    default: 'kv-dm-sd'    

  - name: resource_group_prefix
    type: string
    default: 'rg-dm-datafactory'

  - name: factory_name
    type: string
    default: 'adf-dm-poc-x1-dev-we-1'

  - name: subscription_prefix
    type: string
    default: 'tp-dm-source-data'

  - name: vnet_resource_group_prefix
    type: string
    default: 'rg-source-data-network'

  - name: vnet_prefix
    type: string
    default: 'vnet-source-data-network'

  - name: deployment_pipeline_yml
    type: string
    default: 'ci/azure-pipelines.yml'

stages:
- stage: CheckRepoExistence
  displayName: 'Check if ADF Git Repo Exists'
  jobs:
    - job: CheckRepo
      displayName: 'Check Repository Existence'
      steps:
        - checkout: none

        - task: PowerShell@2
          displayName: 'Check if Repository Exists'
          inputs:
            targetType: 'inline'
            script: |
              # Install Azure CLI DevOps extension
              az extension add --name azure-devops --only-show-errors
              
              # Set up authentication
              $env:AZURE_DEVOPS_EXT_PAT = "$(System.AccessToken)"
              az devops configure --defaults organization=https://dev.azure.com/tetrapak-tpps project="${{ parameters.project_name }}"
              
              Write-Host "Checking if repository '${{ parameters.repository_name }}' exists in project '${{ parameters.project_name }}'..."
              
              # Initialize the variable
              $repoExists = $false
              
              try {
                $repo = az repos show --repository "${{ parameters.repository_name }}" --query "name" -o tsv 2>$null
                if ($LASTEXITCODE -eq 0 -and $repo -and $repo.Trim() -ne "") {
                  Write-Host "Repository '${{ parameters.repository_name }}' already exists!"
                  $repoExists = $true
                } else {
                  Write-Host "Repository '${{ parameters.repository_name }}' does not exist. Will create it."
                  $repoExists = $false
                }
              } catch {
                Write-Host "Repository '${{ parameters.repository_name }}' does not exist. Will create it."
                Write-Host "Error details: $($_.Exception.Message)"
                $repoExists = $false
              }
              
              # Always set the output variable and ensure the step succeeds
              Write-Host "##vso[task.setvariable variable=repoExists;isOutput=true]$repoExists"
              Write-Host "Repository existence check completed successfully."
              
              # Explicitly exit with success code
              exit 0
          name: 'checkRepoStep'

- stage: CreateADFRepo
  displayName: 'Create ADF Git Repository'
  dependsOn: CheckRepoExistence
  condition: eq(dependencies.CheckRepoExistence.outputs['CheckRepo.checkRepoStep.repoExists'], 'false')
  jobs:
    - job: GenerateRepo
      displayName: 'Generate Repository'
      steps:
      - checkout: self
      - checkout: pnp-deploy-repo-automation
        persistCredentials: true

      - task: Bash@3
        displayName: 'Create and checkout dynamic branch'
        inputs:
          targetType: 'inline'
          script: |
            cd $(Build.SourcesDirectory)/pnp-deploy-repo-automation
            
            BRANCH_NAME="${{ parameters.repository_name }}"
            echo "Target branch name: $BRANCH_NAME"
            
            # Configure git
            git config user.email "pipeline@tetrapak.com"
            git config user.name "Azure Pipeline"
            
            # Fetch all remote branches
            git fetch origin
            
            # Check if branch already exists remotely
            if git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
              echo "Branch $BRANCH_NAME exists remotely, checking out..."
              git checkout -b "$BRANCH_NAME" origin/"$BRANCH_NAME"
            else
              echo "Creating new branch $BRANCH_NAME from main..."
              git checkout -b "$BRANCH_NAME"
              
              # Push the new branch to remote so it exists
              git push -u origin "$BRANCH_NAME"
              echo "New branch $BRANCH_NAME created and pushed to remote"
            fi
            
            echo "Currently on branch: $(git branch --show-current)"

      - task: Bash@3
        displayName: 'Generate terraform code'
        inputs:
          targetType: 'filePath'
          filePath: './pnp-pipelines-automation/scripts/azdo-repository/generate-terraform.sh'
          arguments: '"${{ parameters.repository_name }}" "${{ parameters.project_name }}" "${{ parameters.build_pipeline }}" "${{ parameters.deploy_pipeline }}"'
          workingDirectory: '$(Build.SourcesDirectory)/pnp-deploy-repo-automation'

      - task: Bash@3
        displayName: 'Commit and push changes'
        inputs:
          targetType: 'filePath'
          filePath: './pnp-pipelines-automation/scripts/common/commit-and-push.sh'
          arguments: '${{ parameters.repository_name }} ${{ parameters.project_name }}'
          workingDirectory: '$(Build.SourcesDirectory)/pnp-deploy-repo-automation'

      # - script: |
      #     python3 ./pnp-pipelines-automation/scripts/common/create-pull-request.py \
      #       --repository_id "pnp-deploy-repo-automation" \
      #       --source_branch "${{ parameters.repository_name }}"
      #   displayName: "Create Pull Request"
      #   env:
      #     ENCODED_PAT: $(ENCODED_PAT)

- stage: WaitForApproval
  displayName: "Manual Approval before Deploy"
  dependsOn: 
    - CheckRepoExistence
    - CreateADFRepo
  condition: and(succeeded(), eq(dependencies.CheckRepoExistence.outputs['CheckRepo.checkRepoStep.repoExists'], 'false'))
  jobs:
    - job: ApprovalGate
      displayName: "Review Repository Creation - Choose Action"
      pool: server
      timeoutInMinutes: 1440
      steps:
        - task: ManualValidation@0
          displayName: 'Choose: APPROVE to Deploy ADF | REJECT to Skip'
          inputs:
            instructions: |
              Repository '${{ parameters.repository_name }}' has been created successfully!
              
              What would you like to do next?
              
              APPROVE: Continue with ADF pipeline deployment
              REJECT: Skip ADF deployment (keep repository only)
              
              Repository Details:
              - Name: ${{ parameters.repository_name }}
              - Project: ${{ parameters.project_name }}
              - Factory: ${{ parameters.factory_name }}
              
              Make your choice by clicking one of the buttons below.
            onTimeout: 'reject'

- stage: DeployRepo
  displayName: 'Deploy/Destroy Repo'
  dependsOn: 
    - CheckRepoExistence
    - CreateADFRepo
    - WaitForApproval
  condition: and(eq(dependencies.CheckRepoExistence.outputs['CheckRepo.checkRepoStep.repoExists'], 'false'), eq(dependencies.WaitForApproval.result, 'Succeeded'))
  jobs:
    - job: Deploy
      pool:
        name: vmss-dm-pp-prd-we-1
      container:
        image: crdmppbasewe1.azurecr.io/facade-template-tf-module-env_pnp:main
        endpoint: crdmppbasewe1
        options: --user 0:0

      steps:
      - checkout: self
      - checkout: pnp-deploy-repo-automation
        persistCredentials: true
        fetchDepth: 2

      - task: Bash@3
        displayName: 'Switch to dynamic branch'
        inputs:
          targetType: 'inline'
          script: |
            cd $(Build.SourcesDirectory)/pnp-deploy-repo-automation
            
            BRANCH_NAME="${{ parameters.repository_name }}"
            echo "Switching to branch: $BRANCH_NAME"
            
            # Configure git
            git config user.email "pipeline@tetrapak.com"
            git config user.name "Azure Pipeline"
            
            # Fetch all remote branches
            git fetch origin
            
            # Switch to the dynamic branch that was created in CreateADFRepo stage
            if git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
              echo "Branch $BRANCH_NAME exists, checking out..."
              git checkout "$BRANCH_NAME"
              git pull origin "$BRANCH_NAME"
            else
              echo "ERROR: Branch $BRANCH_NAME does not exist! This should not happen."
              exit 1
            fi
            
            echo "Currently on branch: $(git branch --show-current)"

      - task: Bash@3
        displayName: 'Login and fetch token'
        inputs:
          targetType: 'filePath'
          filePath: './pnp-pipelines-automation/scripts/common/get-token.sh'
          workingDirectory: '$(Build.SourcesDirectory)/pnp-deploy-repo-automation'

      - task: Bash@3
        displayName: "Detect changed folders"
        inputs:
          targetType: 'filePath'
          filePath: './pnp-pipelines-automation/scripts/common/detect-changed-folders.sh'
          workingDirectory: '$(Build.SourcesDirectory)/pnp-deploy-repo-automation'

      - task: Bash@3
        displayName: "Apply in changed folders"
        inputs:
          targetType: 'filePath'
          filePath: './pnp-pipelines-automation/scripts/common/apply-in-changed-folders.sh'
          workingDirectory: '$(Build.SourcesDirectory)/pnp-deploy-repo-automation'
        env:
            ENCODED_PAT: $(ENCODED_PAT)
            AZURE_DEVOPS_EXT_PAT: $(PAT)
            GIT_TERMINAL_PROMPT: 0
######################################################{ IR CHECKER }#####################################
- stage: ONPremIRCheck
  displayName: 'IR CHECK'
  dependsOn: 
    - CheckRepoExistence
    - CreateADFRepo
    - WaitForApproval
    - DeployRepo
  condition: or(eq(dependencies.CheckRepoExistence.outputs['CheckRepo.checkRepoStep.repoExists'], 'true'), and(eq(dependencies.CheckRepoExistence.outputs['CheckRepo.checkRepoStep.repoExists'], 'false'), eq(dependencies.DeployRepo.result, 'Succeeded')))
  jobs:
    - job: POOLcapacityCHECK
      displayName: 'Pool Capacity Check'
    steps:
    - task: Bash@3
      name: CheckIRCapacity
      displayName: 'Check ADF Integration Runtime Capacity'
      inputs:
        targetType: 'filePath'
        filePath: './pnp-pipelines-automation/scripts/adf-pipelines/adf_ir_capacity_checker.sh'
        workingDirectory: '${{ parameters.working_dir }}'
      env:
        ADF_RESOURCE_GROUP: 'rg-dm-adf-ir-prd-we-1'
        IR_MAX_CAPACITY: '100'
        AZURE_CLIENT_ID: '2b386df0-8e01-4f94-b6bb-3104a8a8f30c'
    
    - task: Bash@3
      name: SetJobOutputs
      displayName: 'Set Job Output Variables'
      inputs:
        targetType: 'inline'
        script: |
          echo "##vso[task.setvariable variable=SELECTED_ADF;isOutput=true]$(CheckIRCapacity.SELECTED_ADF)"
          echo "##vso[task.setvariable variable=SELECTED_IR;isOutput=true]$(CheckIRCapacity.SELECTED_IR)"        
######################################################{ IR CHECKER }#####################################

- stage: DeployADFpublish
  displayName: 'Deploy ADF tst/prd Pipeline'
  dependsOn: 
    - CheckRepoExistence
    - CreateADFRepo
    - WaitForApproval
    - DeployRepo
    - ONPremIRCheck    
  condition: or(eq(dependencies.CheckRepoExistence.outputs['CheckRepo.checkRepoStep.repoExists'], 'true'), and(eq(dependencies.CheckRepoExistence.outputs['CheckRepo.checkRepoStep.repoExists'], 'false'), eq(dependencies.DeployRepo.result, 'Succeeded')))
  variables:
    SELECTED_ADF: $[ dependencies.ONPremIRCheck.outputs['POOLcapacityCHECK.SetJobOutputs.SELECTED_ADF'] ]
    SELECTED_IR: $[ dependencies.ONPremIRCheck.outputs['POOLcapacityCHECK.SetJobOutputs.SELECTED_IR'] ]
  jobs:
    - job: PushToAdfPublish
      displayName: 'Generating adf_publish branch files'
      steps:
      - checkout: self
      - checkout: pnp-pipelines-automation
        persistCredentials: true
      
      - script: |
          git clone "https://$(System.AccessToken)@dev.azure.com/tetrapak-tpps/Data%20Management/_git/${{ parameters.repository_name }}"
        displayName: 'Clone dynamic repo'

      - template: /scripts/adf-pipelines/templates/generate-and-commit.yml
        parameters:
          repository_name: ${{ parameters.repository_name }}
          project_name:    ${{ parameters.project_name }}
          build_pipeline:  ${{ parameters.build_pipeline }}
          deploy_pipeline: ${{ parameters.deploy_pipeline }}
          branch_name:     "adf_publish"
          factory_name:    ${{ parameters.factory_name }}
          project_abbv:    ${{ parameters.project_abbv }}
          dev_init_flag:   "true"
          prd_flag:        ${{ parameters.prd_flag }}
          key_vault_prefix: ${{ parameters.key_vault_prefix }}
          resource_group_prefix: ${{ parameters.resource_group_prefix }}
          subscription_prefix: ${{ parameters.subscription_prefix }}
          vnet_resource_group_prefix: ${{ parameters.vnet_resource_group_prefix }}
          vnet_prefix:                ${{ parameters.vnet_prefix }}
          deployment_pipeline_yml:    ${{ parameters.deployment_pipeline_yml }}              
          ir_name:       '$(SELECTED_IR)'
          ir_adf:        '$(SELECTED_ADF)'
          working_dir:     '$(Build.SourcesDirectory)/${{ parameters.repository_name }}'

- stage: DeployADFmain
  displayName: 'Deploy ADF dev Pipeline'
  dependsOn: 
    - CheckRepoExistence
    - CreateADFRepo
    - WaitForApproval
    - DeployRepo
    - ONPremIRCheck    
    - DeployADFpublish
  condition: or(eq(dependencies.CheckRepoExistence.outputs['CheckRepo.checkRepoStep.repoExists'], 'true'), and(eq(dependencies.CheckRepoExistence.outputs['CheckRepo.checkRepoStep.repoExists'], 'false'), and(eq(dependencies.DeployRepo.result, 'Succeeded'), eq(dependencies.DeployADFpublish.result, 'Succeeded'))))
  variables:
    SELECTED_ADF: $[ dependencies.ONPremIRCheck.outputs['POOLcapacityCHECK.SetJobOutputs.SELECTED_ADF'] ]
    SELECTED_IR: $[ dependencies.ONPremIRCheck.outputs['POOLcapacityCHECK.SetJobOutputs.SELECTED_IR'] ]
  jobs:
    - job: PushToMain 
      displayName: 'Generating all ADF deployment config Files'
      steps:
      - checkout: self
      - checkout: pnp-pipelines-automation
        persistCredentials: true
      
      - script: |
          git clone "https://$(System.AccessToken)@dev.azure.com/tetrapak-tpps/Data%20Management/_git/${{ parameters.repository_name }}"
        displayName: 'Clone dynamic repo'

      - template: /scripts/adf-pipelines/templates/generate-and-commit.yml
        parameters:
          repository_name: ${{ parameters.repository_name }}
          project_name:    ${{ parameters.project_name }}
          build_pipeline:  ${{ parameters.build_pipeline }}
          deploy_pipeline: ${{ parameters.deploy_pipeline }}
          branch_name:     "main"
          factory_name:    ${{ parameters.factory_name }}
          project_abbv:    ${{ parameters.project_abbv }}
          dev_init_flag:   ${{ parameters.dev_init_flag }}
          prd_flag:        ${{ parameters.prd_flag }}
          key_vault_prefix: ${{ parameters.key_vault_prefix }}
          resource_group_prefix: ${{ parameters.resource_group_prefix }}
          subscription_prefix: ${{ parameters.subscription_prefix }}
          vnet_resource_group_prefix: ${{ parameters.vnet_resource_group_prefix }}
          vnet_prefix:                ${{ parameters.vnet_prefix }}
          deployment_pipeline_yml:    ${{ parameters.deployment_pipeline_yml }}                        
          ir_name:       '$(SELECTED_IR)'
          ir_adf:        '$(SELECTED_ADF)'
          working_dir:     '$(Build.SourcesDirectory)/${{ parameters.repository_name }}'
