trigger: none

name: adf-end-to-end-deployment

variables:
  environment: 'develop'

resources:
  repositories:
    - repository: pnp-pipelines-automation
      type: git
      name: pnp-pipelines-automation
      ref: refs/heads/poc-pool-adf

    # - repository: pnp-deploy-repo-automation
    #   type: git
    #   name: pnp-deploy-repo-automation
    #   ref: refs/heads/tst-adf-main-1

    - repository: facade-template-tf-module-adf_pnp
      type: git
      name: facade-template-tf-module-adf_pnp
      ref: refs/heads/automation

pool:
  name: vmss-dm-pp-prd-we-1
    
parameters:
  - name: repository_name
    type: string
    default: 'de080d-configure-az-dm-ai-spo-adf-1-integration'

  - name: project_name
    type: string
    default: 'Data Management'
    
  - name: project_abbv
    type: string
    default: 'ai-spo'    

  - name: dev_init_flag
    type: string
    default: 'true'

  - name: prd_flag
    type: string
    default: 'false'    

  - name: branch_name
    type: string
    values:
    - main
    - adf_publish    

  - name: build_pipeline
    type: string
    default: 'true'

  - name: deploy_pipeline
    type: string
    default: 'true'

  - name: deploy_pipeline_name
    type: string
    default: 'de080d-configure-az-dm-ai-spo-adf-1-integration'   

  - name: enable_deployment_trigger
    type: boolean
    default: 'true'    

  - name: location
    type: string
    default: 'westeurope'

  - name: key_vault_prefix
    type: string
    default: 'kv-dm-sd'    

  - name: resource_group_prefix
    type: string
    default: 'rg-dm-datafactory'

  - name: factory_name
    type: string
    default: 'adf-dm-ai-spo-dev-we-1'

  - name: subscription_prefix
    type: string
    default: 'tp-dm-source-data'

  - name: vnet_resource_group_prefix
    type: string
    default: 'rg-source-data-network'

  - name: vnet_prefix
    type: string
    default: 'vnet-source-data-network'


  - name: deployment_pipeline_yml
    type: string
    default: 'ci/azure-pipelines.yml'

stages:

# - stage: DeployRepo
#   displayName: 'Deploy/Destroy Repo'
  # dependsOn: 
  #   - CheckRepoExistence
  # condition: and(succeeded(), eq(dependencies.CheckRepoExistence.outputs['CheckRepo.checkRepoStep.repoExists'], 'false'))

  # jobs:
  #   - job: Deploy
  #     pool:
  #       name: vmss-dm-pp-prd-we-1
  #     container:
  #       image: crdmppbasewe1.azurecr.io/facade-template-tf-module-env_pnp:main
  #       endpoint: crdmppbasewe1
  #       options: --user 0:0

  #     steps:
  #     - checkout: self
  #     - checkout: pnp-deploy-repo-automation
  #       persistCredentials: true
  #       fetchDepth: 2

  #     - task: Bash@3
  #       displayName: 'Login and fetch token'
  #       inputs:
  #         targetType: 'filePath'
  #         filePath: './pnp-pipelines-automation/scripts/common/get-token.sh'
  #         workingDirectory: '$(Build.SourcesDirectory)/pnp-deploy-repo-automation'

  #     - task: Bash@3
  #       displayName: "Detect changed folders"
  #       inputs:
  #         targetType: 'filePath'
  #         filePath: './pnp-pipelines-automation/scripts/common/detect-changed-folders.sh'
  #         workingDirectory: '$(Build.SourcesDirectory)/pnp-deploy-repo-automation'

  #     - task: Bash@3
  #       displayName: "Apply in changed folders"
  #       inputs:
  #         targetType: 'filePath'
  #         filePath: './pnp-pipelines-automation/scripts/common/apply-in-changed-folders.sh'
  #         workingDirectory: '$(Build.SourcesDirectory)/pnp-deploy-repo-automation'
  #       env:
  #           ENCODED_PAT: $(ENCODED_PAT)
  #           AZURE_DEVOPS_EXT_PAT: $(PAT)
  #           GIT_TERMINAL_PROMPT: 0

     

#####################################################################################  
- stage: DeployADFpublish
  displayName: 'Deploy ADF tst/prd Pipeline'
  # dependsOn: 
  #   - CheckRepoExistence
  #   - CreateADFRepo
  #   - WaitForApproval
  # condition: |
  #   and(
  #     not(failed()),
  #     or(
  #       and(succeeded('CheckRepoExistence'), eq(dependencies.CheckRepoExistence.outputs['CheckRepo.checkRepoStep.repoExists'], 'true')),
  #       and(succeeded('CreateADFRepo'), eq(dependencies.CheckRepoExistence.outputs['CheckRepo.checkRepoStep.repoExists'], 'false'))
  #     )
  #   )

  jobs:
    - job: PushToAdfPublish
      displayName: 'Generating adf_publish branch files'
      steps:
      - checkout: self
      - checkout: pnp-pipelines-automation
        persistCredentials: true
      
      - script: |
          git clone "https://$(System.AccessToken)@dev.azure.com/tetrapak-tpps/Data%20Management/_git/${{ parameters.repository_name }}"
        displayName: 'Clone dynamic repo'

      - template: /scripts/adf-pipelines/templates/generate-and-commit.yml
        parameters:
          repository_name: ${{ parameters.repository_name }}
          project_name:    ${{ parameters.project_name }}
          build_pipeline:  ${{ parameters.build_pipeline }}
          deploy_pipeline: ${{ parameters.deploy_pipeline }}
          branch_name:     "adf_publish"
          factory_name:    ${{ parameters.factory_name }}
          project_abbv:    ${{ parameters.project_abbv }}
          dev_init_flag:   "true"
          prd_flag:        ${{ parameters.prd_flag }}
          key_vault_prefix: ${{ parameters.key_vault_prefix }}
          resource_group_prefix: ${{ parameters.resource_group_prefix }}
          subscription_prefix: ${{ parameters.subscription_prefix }}
          vnet_resource_group_prefix: ${{ parameters.vnet_resource_group_prefix }}
          vnet_prefix:                ${{ parameters.vnet_prefix }}
          deployment_pipeline_yml:    ${{ parameters.deployment_pipeline_yml }}              
          working_dir:     '$(Build.SourcesDirectory)/${{ parameters.repository_name }}'

- stage: DeployADF
  displayName: 'Deploy ADF dev Pipeline'
  jobs:

    - job: PushToMain 
      displayName: 'Generating all ADF deployment config Files'
      steps:
      - checkout: self
      - checkout: pnp-pipelines-automation
        persistCredentials: true
      
      - script: |
          git clone "https://$(System.AccessToken)@dev.azure.com/tetrapak-tpps/Data%20Management/_git/${{ parameters.repository_name }}"
        displayName: 'Clone dynamic repo'

      - template: /scripts/adf-pipelines/templates/generate-and-commit.yml
        parameters:
          repository_name: ${{ parameters.repository_name }}
          project_name:    ${{ parameters.project_name }}
          build_pipeline:  ${{ parameters.build_pipeline }}
          deploy_pipeline: ${{ parameters.deploy_pipeline }}
          branch_name:     "main"
          factory_name:    ${{ parameters.factory_name }}
          project_abbv:    ${{ parameters.project_abbv }}
          dev_init_flag:   ${{ parameters.dev_init_flag }}
          prd_flag:        ${{ parameters.prd_flag }}
          key_vault_prefix: ${{ parameters.key_vault_prefix }}
          resource_group_prefix: ${{ parameters.resource_group_prefix }}
          subscription_prefix: ${{ parameters.subscription_prefix }}
          vnet_resource_group_prefix: ${{ parameters.vnet_resource_group_prefix }}
          vnet_prefix:                ${{ parameters.vnet_prefix }}
          deployment_pipeline_yml:    ${{ parameters.deployment_pipeline_yml }}                        
          working_dir:     '$(Build.SourcesDirectory)/${{ parameters.repository_name }}'          
#####################################################################################  


      # - script: |
      #     python3 "$(Build.SourcesDirectory)/pnp-pipelines-automation/scripts/adf-pipelines/create-pull-request.py" \
      #       --repository_id "${{ parameters.repository_name }}" \
      #       --source_branch "${{ parameters.repository_name }}" \
      #       --project_name "${{ parameters.project_name }}"
      #   displayName: "Run Python Script to Create PR"
      #   workingDirectory: '$(Build.SourcesDirectory)/${{ parameters.repository_name }}'
      #   env:
      #     ENCODED_PAT: $(ENCODED_PAT)
